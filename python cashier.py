# -*- coding: utf-8 -*-
"""Project Python PACMANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17huyhm6gb8yUgnnn1PEq0ZM6ja4jL4_y
"""

import pandas as pd
import numpy as np

class Transaction:
    def __init__(self):
      self.items = []
      """
      self.items is an empty list for initialization
      """

    def add_item(self, item_name=np.nan, item_qty=np.nan, item_price=np.nan):
      """
      This is the method to add item name, item quantity, and item price
      """
      self.items.append({'name': item_name, 'qty': item_qty, 'price': item_price})


    def update_item_name(self, old_name, new_name):
      """
      This is the method to update the item name into the new one
      """
      for item in self.items:
        if item['name'] == old_name:
          item['name'] = new_name
          print(f"{old_name} has been changed to {new_name}")
          break
      
      else:
        print(f"{old_name} is not found")


    def update_item_qty(self, item_name, new_qty):
      """
      This is the method for updating item quantity
      """
      for item in self.items:
        if item['name'] == item_name:
          item['qty'] = new_qty


    def update_item_price(self, item_name, new_price):
      """
      This is the method for updating item price
      """
      for item in self.items:
        if item['name'] == item_name:
          item['price'] = new_price


    def delete_item(self, item_name):
      """
      This is the method for deleting
      """
      for item in self.items:
        if item['name'] == item_name:
          self.items.remove(item)


    def reset_transaction(self):
      """
      This is the method for resetting transaction
      """
      self.items = []


    def check_order(self):
      """
      This is the method to check order
      """
      for item in self.items:
        if not all([item.get('name'), item.get('qty'), item.get('price')]):
          return 'Terdapat kesalahan input data'
        df = pd.DataFrame(self.items)
        df['total'] = df['qty'] * df['price']
        return df


    def total_price(self):
      """
      This is the method to total all the transaction
      """
      total = sum(item['qty'] * item['price'] for item in self.items)
      if total > 500000:
        return total * 0.9
      elif total > 300000:
        return total * 0.92
      elif total > 200000:
        return total * 0.95
      else:
        return total

# Create a new transaction
t = Transaction()

# Add some items to the transaction
t.add_item('car', 1, 1000000)
t.add_item('motor', 3, 500000)
t.add_item('horse', 1, 10000)

# Check the order
print(t.check_order())
# Output:
#      name  qty  price  total
# 0   apple    2  10000  20000
# 1  banana    3   5000  15000
# 2  orange    1  15000  15000

# Update an item in the transaction
t.update_item_name('motor', 'cycle')

t.check_order()

t.total_price()

